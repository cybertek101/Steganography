/*
 * stego.java
 *
 * Created on October 7, 2007, 2:09 PM
 */

package my.steganography;

import java.awt.Canvas;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.MemoryImageSource;
import java.awt.image.PixelGrabber;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import java.io.File;
import javax.swing.JOptionPane;
import java.awt.Toolkit;
import java.awt.MediaTracker;

/**
 *
 * @author  asmel
 */
public class stego extends javax.swing.JFrame {
    private Image coverImage;
    private Image stegoImage;
    
    private int[] coverImage1DPix;
    private int[] stegoImage1DPix;
    
    private String secretMessage;
    
    private String previousDirectory;
    /** Creates new form stego */
    public stego() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        btnLoadCoverImage = new javax.swing.JButton();
        scrlPnCoverImage = new javax.swing.JScrollPane();
        lblCoverImage = new javax.swing.JLabel();
        scrlPnStegoImage = new javax.swing.JScrollPane();
        lblStegoImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        btnLoadCoverImage.setText("load Cover Image");
        btnLoadCoverImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadCoverImageActionPerformed(evt);
            }
        });

        lblCoverImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCoverImage.setText("Cover image labe");
        scrlPnCoverImage.setViewportView(lblCoverImage);

        lblStegoImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblStegoImage.setText("Stego Image label");
        scrlPnStegoImage.setViewportView(lblStegoImage);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(scrlPnCoverImage, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrlPnStegoImage, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnLoadCoverImage))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(btnLoadCoverImage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrlPnCoverImage, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                    .addComponent(scrlPnStegoImage, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadCoverImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadCoverImageActionPerformed
// TODO add your handling code here:
        JFileChooser fc = new JFileChooser("");
        int result = fc.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION){
            File file = fc.getSelectedFile();
            String imageFileName = file.getPath();
            //JOptionPane.showConfirmDialog(this, imageFileName, "filename", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE);
            
            int loadStatus = this.setCoverImage(imageFileName);
            //System.out.println(loadStatus);
            
            if (loadStatus == -1){
                this.lblCoverImage.setText("Error loading cover image. Image may be corrupted or is taking long to load");
                this.lblCoverImage.setIcon(null);
                return;
            }
            
            //if loaded successfuly
            this.lblCoverImage.setText("");
            this.lblCoverImage.setIcon(new ImageIcon(coverImage));
            System.out.println("h:"+this.coverImage.getHeight(null)+"w:"+this.coverImage.getWidth(null));
            try {
                this.processImage();
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnLoadCoverImageActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new stego().setVisible(true);
            }
        });
    }
    
    private int setCoverImage(String filename) {
        this.coverImage = Toolkit.getDefaultToolkit().getImage(filename);
        MediaTracker tracker = new MediaTracker(this);
        tracker.addImage(this.coverImage, 1);
        
        try{
            if (!tracker.waitForID(1, 10000)){
                return -1;//not loaded
            }
        }catch(InterruptedException e){
            e.printStackTrace();
            return -1;//not loaded
        }
        if((tracker.statusAll(false) & MediaTracker.ERRORED & MediaTracker.ABORTED) != 0){            
            return -1;//not loaded
        }
        return 1;//loaded
    }
    
    private boolean extractImagePixels(){
        int imageRows = this.coverImage.getHeight(null);
        int imageCols = this.coverImage.getWidth(null);
        
        this.coverImage1DPix = new int[imageRows * imageCols];
        PixelGrabber pg = new PixelGrabber(this.coverImage, 0,0, imageCols, imageRows,this.coverImage1DPix, 0, imageCols);
        
        try{
            boolean result = pg.grabPixels();
            return true;
        }catch(InterruptedException e){
            e.printStackTrace();
            return false;
        }
    }
    
    private void processImage() throws FileNotFoundException, IOException{
        if(!this.extractImagePixels()){
               System.out.println("Error extracting pixels");
            return;
        }
        
        //hide message here
        this.secretMessage = "";
        this.getSecretMessage();
        //System.out.println("safe2");
        //JOptionPane.showMessageDialog(this, this.secretMessage.charAt(0) + this.secretMessage.length(), "secret message", JOptionPane.INFORMATION_MESSAGE);      
        this.stegoImage1DPix = new int[this.coverImage1DPix.length];
        for (int i = 0; i < this.coverImage1DPix.length; ++i){
            this.stegoImage1DPix[i] = this.coverImage1DPix[i];//|0xff000000;
        }
        /*
        if (this.secretMessage.length() >= this.stegoImage1DPix.length/2){
            JOptionPane.showMessageDialog(this, "Can't hide! too much characters!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        for (int msgIndex = 0; msgIndex < this.secretMessage.length(); ++msgIndex){           
            int charVal = this.secretMessage.charAt(msgIndex);            
            String binary = "";
            for (int i = 7; i >= 0; --i){
                if (((charVal >> i) & 0x01) == 1){                  
                    binary+="1";
                }else                    
                    binary+="0";
            }
            //System.out.println((char)charVal + " " + binary);
            //if (binary.charAt(0)=='1') this.stegoImage1DPix[2*msgIndex] |= 0x01000000;
            //else this.stegoImage1DPix[2*msgIndex] &= 0xFEFFFFFF;
            
            if (binary.charAt(1)=='1') this.stegoImage1DPix[2*msgIndex] |= 0x00010000;
            else this.stegoImage1DPix[2*msgIndex] &= 0xFFFEFFFF;
            
            if (binary.charAt(2)=='1') this.stegoImage1DPix[2*msgIndex] |= 0x00000100;
            else this.stegoImage1DPix[2*msgIndex] &= 0xFFFFFEFF;
            
            if (binary.charAt(3)=='1') this.stegoImage1DPix[2*msgIndex] |= 0x00000001;
            else this.stegoImage1DPix[2*msgIndex] &= 0xFFFFFFFE;
            
            //----
            //if (binary.charAt(4) == '1') this.stegoImage1DPix[2*msgIndex + 1] |= 0x01000000;
            //else this.stegoImage1DPix[2*msgIndex + 1] &= 0xFEFFFFFF;
            
            if (binary.charAt(5) == '1') this.stegoImage1DPix[2*msgIndex + 1] |= 0x00010000;
            else this.stegoImage1DPix[2*msgIndex + 1] &= 0xFFFEFFFF;
            
            if (binary.charAt(6) == '1') this.stegoImage1DPix[2*msgIndex + 1] |= 0x00000100;
            else this.stegoImage1DPix[2*msgIndex + 1] &= 0xFFFFFEFF;
            
            if (binary.charAt(7) == '1') this.stegoImage1DPix[2*msgIndex + 1] |= 0x00000001;
            else this.stegoImage1DPix[2*msgIndex + 1] &= 0xFFFFFFFE;
        }        
        
        */
        int width = this.coverImage.getWidth(null);
        int height = this.coverImage.getHeight(null);        
        this.stegoImage = createImage(new MemoryImageSource(width, height, this.coverImage1DPix ,0, width));
        //
        
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR_PRE);
        Graphics2D g2 = bi.createGraphics();
        g2.drawImage(this.stegoImage, 0,0,null);
        
        g2.dispose();
        try{
            ImageIO.write(bi, "jpg", new File("test"));
        }
        catch(IOException ioe){
            System.out.println("write:" + ioe.getMessage());
        }
        //ImageIO.write(this.stegoImage, "jpg", file);
         /// 
        this.lblStegoImage.setText("");
        this.lblStegoImage.setIcon(new ImageIcon(this.stegoImage)); 
        
        for (int i=0; i < this.coverImage1DPix.length; ++i){
            System.out.println("" + ((this.coverImage1DPix[i] >> 24)&0xFF) + "-" + ((this.coverImage1DPix[i] >> 16)&0xff) + "-" + ((this.coverImage1DPix[i] >> 8)&0xff) + "-" + ((this.coverImage1DPix[i])&0xff));
            //System.out.println("|" + ((this.stegoImage1DPix[i] >> 24)&0xff) + "-" + ((this.stegoImage1DPix[i] >> 16)&0xff) + "-" + ((this.stegoImage1DPix[i] >> 8)&0xff) + "-" + ((this.stegoImage1DPix[i])&0xff));
        }
        
        //this.extractSecretMessage(this.secretMessage.length());
    }
    
    void getSecretMessage(){
        JFileChooser fc = new JFileChooser("");
        int result = fc.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION){
            File file = fc.getSelectedFile();
            BufferedReader br;
            try {
                br = new BufferedReader(new FileReader(file));
                String line = null;
                try {
                    line = br.readLine();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
                //System.out.println(""+line);
                while (line != null){
                    this.secretMessage += (line + "\n");
                    try {
                        line = br.readLine();
                    } catch (IOException ex) {                        
                        //JOptionPane.showMessageDialog(this, "error io", "", JOptionPane.INFORMATION_MESSAGE);
                        ex.printStackTrace();
                    }
                    //System.out.println(""+line);
                }                   
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            }                            
        }
        //System.out.println("safe");
    }
    private void extractSecretMessage(int messageLen){
        String secretMessage = "";
        JOptionPane.showMessageDialog(this, "" + messageLen, "len", JOptionPane.INFORMATION_MESSAGE);
        for (int i = 0; i < messageLen; ++i){
            String binary = "" + ((this.stegoImage1DPix[2*i] >> 24)&0x01) + "" + ((this.stegoImage1DPix[2*i] >> 16)&0x01) + "" + ((this.stegoImage1DPix[2*i] >> 8)&0x01) + "" + ((this.stegoImage1DPix[2*i])&0x01) +
                            "" + ((this.stegoImage1DPix[2*i+1] >> 24)&0x01) + "" + ((this.stegoImage1DPix[2*i+1] >> 16)&0x01) + "" + ((this.stegoImage1DPix[2*i+1] >> 8)&0x01) + "" + ((this.stegoImage1DPix[2*i+1])&0x01);
            //System.out.println(binary);
            int charVal = 0;
            for (int j = 7; j >= 0; --j){
                //charVal+=binary.charAt(7-j) * Math.pow(2.0, (double)j);
                if (binary.charAt(7-j) == '1'){
                    charVal += Math.pow(2.0, (double)j);
                }
            }
            
            secretMessage += (char)charVal;
        }
        
        JOptionPane.showMessageDialog(this, secretMessage, "Secret revieled", JOptionPane.INFORMATION_MESSAGE);
    } 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoadCoverImage;
    private javax.swing.JLabel lblCoverImage;
    private javax.swing.JLabel lblStegoImage;
    private javax.swing.JScrollPane scrlPnCoverImage;
    private javax.swing.JScrollPane scrlPnStegoImage;
    // End of variables declaration//GEN-END:variables
    
}
